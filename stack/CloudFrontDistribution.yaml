AWSTemplateFormatVersion: "2010-09-09"

Description: CloudFormation template for S3 bucket to host static website

Parameters:
  Environment:
    Description: The environment to deploy into. Controls caching behavior.
    Type: String
    AllowedValues:
      - dev
      - prod
  DomainName:
    Description: The domain name for the website
    Type: String
  DomainCertificateArn:
    Description: The ARN of a certificate for this domain
    Type: String
#  HostedZoneName:
#    Description: The zone name for the hosted zone serving this distro's DNS entries
#    Type: String
  HostedZoneId:
    Description: The id of the hosted zone to add the DNS records to,
    Type: String
  S3Bucket:
    Type: String
    Description: The name of the root S3 bucket.
  S3BucketName:
    Description: The domain name of the S3 bucket to use for the origin
    Type: String
  S3BucketRootArn:
    Description: The ARN of the root S3 Bucket
    Type: String
#  S3LoggingBucketDomain:
#    Description: The domain name of the bucket to use for logs.
#    Type: String

Conditions:
  IsProd: !Equals [!Ref Environment, prod]

Resources:
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${DomainName}'

  S3BucketOAIPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub '${S3BucketRootArn}/*'
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: # CNAMES
          - !Ref DomainName
#        CacheBehaviors:
#          - CacheBehavior
        Comment: !Sub "A distribution for ${DomainName}"
#        CustomErrorResponses:
#          - CustomErrorResponse
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          # Cache Policy ID specifies the caching policy to use, if we are in prod, then use the managed caching policy, if in dev, do not cache
          # Managed Cache IDs can be found here: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
          CachePolicyId: !If [IsProd, "658327ea-f89d-4fab-a63d-7e88639e58f6", "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"]
          Compress: true
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
          TargetOriginId: !Sub 'S3-${AWS::StackName}-root'  # ID of the origin below
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
#        Logging:
#          Bucket: !Ref S3LoggingBucketDomain
#          IncludeCookies: false
#          Prefix: "cdn/"
#        OriginGroups:
#          OriginGroups
        Origins:
          - DomainName: !Ref S3BucketName
            Id: !Sub 'S3-${AWS::StackName}-root'
            S3OriginConfig:
              OriginAccessIdentity: !Join ['', ['origin-access-identity/cloudfront/', !Ref CloudFrontOriginAccessIdentity]]
        PriceClass: "PriceClass_100"
        ViewerCertificate:
          AcmCertificateArn: !Ref DomainCertificateArn
#          IamCertificateId: String
          MinimumProtocolVersion: TLSv1
          SslSupportMethod: sni-only

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Comment: Sets a custom header that specifies the environment this website is deployed in
        Name: !Join ["-", ["SetEnvironmentHeaders", !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]]]
        CustomHeadersConfig:
          Items:
            - Header: SDASU-Environment
              Override: true
              Value: !Ref Environment

  # The record sets to serve DNS queries about the cloud front distro
  CloudFrontRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        #        EvaluateTargetHealth: Boolean
        HostedZoneId: Z2FDTNDATAQYW2  # This comes from the docs here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
      #      Comment: String
      #      Failover: String
      HostedZoneId: !Ref HostedZoneId
#      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: A

  CloudFrontRecordSetIPv6:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        #        EvaluateTargetHealth: Boolean
        HostedZoneId: Z2FDTNDATAQYW2  # This comes from the docs here: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-aliastarget.html
      #      Comment: String
      #      Failover: String
      HostedZoneId: !Ref HostedZoneId
#      HostedZoneName: !Ref HostedZoneName
      Name: !Ref DomainName
      Type: AAAA

Outputs:
  CloudFrontDistribution:
    Description: CloudFront Distribution
    Value: !GetAtt CloudFrontDistribution.DomainName
